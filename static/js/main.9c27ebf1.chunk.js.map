{"version":3,"sources":["images/cptamerica_170x170.jpg","images/daredevil_170x170.jpeg","images/doctorStrange_170x170.png","images/fantasticFour_170x170.png","images/hulk_170x170.png","images/infinityGauntlet_170x170.png","images/ironman_170x170.jpg","images/spiderman_170x170.png","images/thor_170x170.png","images/blackpanther_170x170.jpeg","images/antman_170x170.jpeg","images/submariner_170x170.jpeg","components/Navbar/Navbar.js","components/Header/Header.js","components/Character/Character.js","components/Container/Container.js","components/Footer/Footer.js","images.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","props","react_default","a","createElement","className","navMsgColor","navMessage","score","highScore","Header","Character","onClick","e","clickEvent","target","src","name","alt","Container","shake","map","i","components_Character_Character","key","Footer","Images","Antman","BlackPanther","CptAmerica","DareDevil","DoctorStrange","FantasticFour","Hulk","InfinityG","IronMan","SpiderMan","Submariner","Thor","ClickGame","state","allCharacters","_this","shuffleArray","wasClicked","checkClicked","bind","Object","assertThisInitialized","newArr","slice","shuffleArr","length","push","splice","Math","floor","random","clickedE","_this2","this","prevState","shuffled","includes","setState","setTimeout","components_Navbar_Navbar","components_Header_Header","components_Container_Container","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,6DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,6DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iUCczBC,SAVA,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAMK,aAAcL,EAAMM,YAC1CL,EAAAC,EAAAC,cAAA,qBACYH,EAAMO,MADlB,IACyBN,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,KADzB,gBACsEJ,EAAMQ,cCEnEC,SARA,kBACbR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,yFCIWO,SANG,SAAAV,GAAK,OACpBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOO,QAAS,SAAAC,GAAC,OAAIZ,EAAMa,WAAWD,EAAEE,OAAOC,OAC5Dd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BW,IAAKf,EAAMgB,KAAMC,IAAI,QCUrDC,SAXG,SAAAlB,GAAK,OACnBC,EAAAC,EAAAC,cAAA,OAAKC,UACDJ,EAAMmB,MACJ,0DACA,qDAGJnB,EAAMU,UAAUU,IAAI,SAAClB,EAAGmB,GAAJ,OAASpB,EAAAC,EAAAC,cAACmB,EAAD,CAAWN,KAAMd,EAAGqB,IAAKF,EAAGR,WAAYb,EAAMa,kBCNlEW,SAFA,kBAAMvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAf,0NC0BNqB,EAfA,CACbC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,KCqEaC,6MAvFbC,MAAQ,CACNhC,MAAO,EACPC,UAAW,EACXH,YAAa,GACbC,WAAY,2BACZkC,cAAeC,EAAKC,eACpBC,WAAY,GACZxB,OAAO,KAGTN,WAAa4B,EAAKG,aAAaC,KAAlBC,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAAL,mFAKX,IAFA,IAAMO,EAASvB,EAAOwB,QAChBC,EAAa,GACZF,EAAOG,OAAS,GACrBD,EAAWE,KACTJ,EAAOK,OAAOC,KAAKC,MAAMD,KAAKE,SAAWR,EAAOG,QAAS,GAAG,IAGhE,OAAOD,uCAGIO,GAAU,IAAAC,EAAAC,KACfC,EAAYD,KAAKpB,MAAMI,WAAWM,QAClCY,EAAWF,KAAKjB,eAClBnC,EAAQoD,KAAKpB,MAAMhC,MACnBC,EAAYmD,KAAKpB,MAAM/B,UAY3B,GAVKmD,KAAKpB,MAAMI,WAAWmB,SAASL,KAC9BlD,IAAUC,GACZD,IACAC,KAEAD,IAEFqD,EAAUR,KAAKK,IAGbE,KAAKpB,MAAMI,WAAWmB,SAASL,GAAW,CAE5C,OAAOE,KAAKI,SAAS,CACnBxD,MAFU,EAGVC,UAAWA,EACXH,YAAa,YACbC,WAAY,mBACZkC,cAAeqB,EACflB,WAAY,GACZxB,OAAO,IAcX,OAVAwC,KAAKI,SAAS,CACZxD,MAAOA,EACPC,UAAWA,EACXH,YAAa,UACbC,WAAY,uBACZkC,cAAeqB,EACflB,WAAYiB,EACZzC,OAAO,IAGF6C,WAAW,kBAAMN,EAAKK,SAAS,CAAE1D,YAAa,MAAO,sCAI5D,IAAMkC,EAAQoB,KAAKpB,MACnB,OACEtC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC8D,EAAD,CACE1D,MAAOgC,EAAMhC,MACbC,UAAW+B,EAAM/B,UACjBF,WAAYiC,EAAMjC,WAClBD,YAAakC,EAAMlC,cAErBJ,EAAAC,EAAAC,cAAC+D,EAAD,MACAjE,EAAAC,EAAAC,cAACgE,EAAD,CACEhD,MAAOoB,EAAMpB,MACbT,UAAW6B,EAAMC,cACjB3B,WAAY8C,KAAK9C,aAEnBZ,EAAAC,EAAAC,cAACiE,EAAD,cAlFgBC,aCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3E,EAAAC,EAAAC,cAAC0E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9c27ebf1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cptamerica_170x170.43cc815a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/daredevil_170x170.9ba68580.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/doctorStrange_170x170.9b5334fd.png\";","module.exports = __webpack_public_path__ + \"static/media/fantasticFour_170x170.77577754.png\";","module.exports = __webpack_public_path__ + \"static/media/hulk_170x170.c63bedea.png\";","module.exports = __webpack_public_path__ + \"static/media/infinityGauntlet_170x170.d18a700e.png\";","module.exports = __webpack_public_path__ + \"static/media/ironman_170x170.a033e75f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/spiderman_170x170.644a5052.png\";","module.exports = __webpack_public_path__ + \"static/media/thor_170x170.6348fceb.png\";","module.exports = __webpack_public_path__ + \"static/media/blackpanther_170x170.0cd3de09.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/antman_170x170.e0c943e5.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/submariner_170x170.18bd8cf4.jpeg\";","import React from 'react';\nimport './Navbar.css';\n\n//Component that takes in Props and uses them to render JSX to the DOM.\nconst Navbar = props => (\n    <div className=\"navbar\">\n      <div>Click Game</div>\n      <div className={props.navMsgColor}>{props.navMessage}</div>\n      <div>\n          Score: {props.score} <span className=\"pipe\">|</span> High Score: {props.highScore}\n      </div>\n    </div>\n)\n\nexport default Navbar;","import React from \"react\";\nimport \"./Header.css\";\n\nconst Header = () => (\n  <div className=\"header\">\n    <h1>\n      Click on an image to earn points, but don't click on any more than once!\n    </h1>\n  </div>\n);\n\nexport default Header;\n","import React from 'react';\nimport './Character.css';\n\nconst Character = props => (\n   <div className=\"card\" onClick={e => props.clickEvent(e.target.src)}>\n     <img className=\"card-img-top card-height\" src={props.name} alt=\"\" />   \n   </div>\n);\n\nexport default Character;","import React from 'react';\nimport Character from '../Character/Character';\nimport './Container.css';\n\nconst Container = props => (\n    <div className = {\n        props.shake\n        ? 'container d-flex flex-wrap justify-content-center shake'\n        : 'container d-flex flex-wrap justify-content-center'\n    }\n    >\n     {props.Character.map((a, i) =><Character name={a} key={i} clickEvent={props.clickEvent} />)}\n    </div>\n);\n\nexport default Container;","import React from 'react';\nimport './Footer.css'\n\nconst Footer = () => <div className=\"footer text-center\">Click Game!</div>;\n\nexport default Footer;","import CptAmerica from './images/cptamerica_170x170.jpg'\nimport DareDevil from './images/daredevil_170x170.jpeg'\nimport DoctorStrange from './images/doctorStrange_170x170.png'\nimport FantasticFour from './images/fantasticFour_170x170.png'\nimport Hulk from './images/hulk_170x170.png'\nimport InfinityG from './images/infinityGauntlet_170x170.png'\nimport IronMan from './images/ironman_170x170.jpg'\nimport SpiderMan from './images/spiderman_170x170.png'\nimport Thor from './images/thor_170x170.png'\nimport BlackPanther from './images/blackpanther_170x170.jpeg'\nimport Antman from './images/antman_170x170.jpeg'\nimport Submariner from './images/submariner_170x170.jpeg'\n\n\nconst Images = [\n  Antman,\n  BlackPanther,\n  CptAmerica,\n  DareDevil,\n  DoctorStrange,\n  FantasticFour,\n  Hulk,\n  InfinityG,\n  IronMan,\n  SpiderMan,\n  Submariner,        \n  Thor\n]\n\nexport default Images;","import React, { Component } from \"react\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Header from \"./components/Header/Header\";\nimport Container from \"./components/Container/Container\";\nimport Footer from \"./components/Footer/Footer\";\nimport Images from \"./images\";\n\nclass ClickGame extends Component {\n  state = {\n    score: 0,\n    highScore: 0,\n    navMsgColor: \"\",\n    navMessage: \"Click an image to begin!\",\n    allCharacters: this.shuffleArray(),\n    wasClicked: [],\n    shake: false\n  };\n\n  clickEvent = this.checkClicked.bind(this);\n\n  shuffleArray() {\n    const newArr = Images.slice();\n    const shuffleArr = [];\n    while (newArr.length > 0) {\n      shuffleArr.push(\n        newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]\n      );\n    }\n    return shuffleArr;\n  }\n\n  checkClicked(clickedE) {\n    const prevState = this.state.wasClicked.slice();\n    const shuffled = this.shuffleArray();\n    let score = this.state.score;\n    let highScore = this.state.highScore;\n\n    if (!this.state.wasClicked.includes(clickedE)) {\n      if (score === highScore) {\n        score++;\n        highScore++;\n      } else {\n        score++;\n      }\n      prevState.push(clickedE);\n    }\n\n    if (this.state.wasClicked.includes(clickedE)) {\n      let score = 0;\n      return this.setState({\n        score: score,\n        highScore: highScore,\n        navMsgColor: \"incorrect\",\n        navMessage: \"Incorrect guess!\",\n        allCharacters: shuffled,\n        wasClicked: [],\n        shake: true\n      });\n    }\n\n    this.setState({\n      score: score,\n      highScore: highScore,\n      navMsgColor: \"correct\",\n      navMessage: \"You Guessed Correct!\",\n      allCharacters: shuffled,\n      wasClicked: prevState,\n      shake: false\n    });\n\n    return setTimeout(() => this.setState({ navMsgColor: \"\" }), 500);\n  }\n\n  render() {\n    const state = this.state;\n    return (\n      <div>\n        <Navbar\n          score={state.score}\n          highScore={state.highScore}\n          navMessage={state.navMessage}\n          navMsgColor={state.navMsgColor}\n        />\n        <Header />\n        <Container\n          shake={state.shake}\n          Character={state.allCharacters}\n          clickEvent={this.clickEvent}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default ClickGame;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}